Akka:
	Akka is a toolkit and runtime for building highly concurrent, distributed, and fault-tolerant event-driven applications on the JVM.
	Actors are the unit of execution in Akka. The Actor model is an abstraction that makes it easier to write correct concurrent, parallel and distributed systems. 

	Reactive: 
		Akka clusters address all four of the fundamental properties of reactive systems. By design they are responsive, resilient, elastic and message driven.
	Remoting & Clustoring: 
		Akka clustering is built on top of Akka remoting. Akka remoting provides some of the more basic features required by Akka clustering. With Akka remoting actors running in separate JVMs can communicate with each other. The primary difference between Akka clustering and Akka remoting is that with Akka remoting the individual actor systems do not form themselves into clusters. Each actor system runs independently of other remote instances.
		Akka remoting predates Akka clustering. While it is still an important part of the Akka toolkit, it is now mainly used internally by Akka itself. It is no longer intended to be used externally.
		Akka remoting continues to be supported and documented mainly because of its legacy of use in the past. The documentation is also provided as a source of information for those that are curious about some of the internal workings of Akka.
		
		
		
----------------------- Reactive Systems
	Reactive Systems are:
	Responsive: 
		The system responds in a timely manner if at all possible. Responsiveness is the cornerstone of usability and utility, but more than that, responsiveness means that problems may be detected quickly and dealt with effectively. Responsive systems focus on providing rapid and consistent response times, establishing reliable upper bounds so they deliver a consistent quality of service. This consistent behaviour in turn simplifies error handling, builds end user confidence, and encourages further interaction.
	Resilient: 
		The system stays responsive in the face of failure. This applies not only to highly-available, mission critical systems — any system that is not resilient will be unresponsive after a failure. Resilience is achieved by replication, containment, isolation and delegation. Failures are contained within each component, isolating components from each other and thereby ensuring that parts of the system can fail and recover without compromising the system as a whole. Recovery of each component is delegated to another (external) component and high-availability is ensured by replication where necessary. The client of a component is not burdened with handling its failures.
	Elastic: 
		The system stays responsive under varying workload. Reactive Systems can react to changes in the input rate by increasing or decreasing the resources allocated to service these inputs. This implies designs that have no contention points or central bottlenecks, resulting in the ability to shard or replicate components and distribute inputs among them. Reactive Systems support predictive, as well as Reactive, scaling algorithms by providing relevant live performance measures. They achieve elasticity in a cost-effective way on commodity hardware and software platforms.
	Message Driven: 
		Reactive Systems rely on asynchronous message-passing to establish a boundary between components that ensures loose coupling, isolation and location transparency. This boundary also provides the means to delegate failures as messages. Employing explicit message-passing enables load management, elasticity, and flow control by shaping and monitoring the message queues in the system and applying back-pressure when necessary. Location transparent messaging as a means of communication makes it possible for the management of failure to work with the same constructs and semantics across a cluster or within a single host. Non-blocking communication allows recipients to only consume resources while active, leading to less system overhead.
		
----------------------- Benefits of using the Actor Model
	The following characteristics of Akka allow you to solve difficult concurrency and scalability challenges in an intuitive way:
	Event-driven model — Actors perform work in response to messages. Communication between Actors is asynchronous, allowing Actors to send messages and continue their own work without blocking to wait for a reply.
	Strong isolation principles — Unlike regular objects in Java, an Actor does not have a public API in terms of methods that you can invoke. Instead, its public API is defined through messages that the actor handles. This prevents any sharing of state between Actors; the only way to observe another actor’s state is by sending it a message asking for it.
	Location transparency — The system constructs Actors from a factory and returns references to the instances. Because location doesn’t matter, Actor instances can start, stop, move, and restart to scale up and down as well as recover from unexpected failures.
	Lightweight — Each instance consumes only a few hundred bytes, which realistically allows millions of concurrent Actors to exist in a single application.
	
-------------------- Akka Clustering
	what is “real” clustering? 
		It is a group of JVMs, each running an actor system, and each configured as a cluster provider. 
	
----------------------- Sending messages to Actors
	
----------------------- Subscribing to dead letters
	The event stream is the main event bus of each actor system: it is used for carrying log messages and Dead Letters and may be used by the user code for other purposes as well. It uses Subchannel Classification which enables registering to related sets of channels (as is used for RemotingLifecycleEvent). The following example demonstrates how a simple subscription works. Given a simple actor:

		import akka.actor.ActorRef;
		import akka.actor.ActorSystem;
		public class DeadLetterActor extends AbstractActor {
		  @Override
		  public Receive createReceive() {
			return receiveBuilder()
			  .match(DeadLetter.class, msg -> {
				System.out.println(msg);
			  })
			  .build();
		  }
		}
	
	it can be subscribed like this:

		final ActorSystem system = ActorSystem.create("DeadLetters");
		final ActorRef actor = system.actorOf(Props.create(DeadLetterActor.class));
		system.eventStream().subscribe(actor, DeadLetter.class);
		
----------------------- Akka with dependency injection framework
	https://github.com/typesafehub/activator-akka-java-spring